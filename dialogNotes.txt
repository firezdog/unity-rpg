==== Reading Multiple Lines ====

=> activeInHierarchy (useful later)
uses GetButton w/ Input Manager (might be good w/ spacebar)
(Project Settings => Input)
(Fire1 = left ctrl, mouse 0)
GetButton vs. GetButtonUp
prevent out of range errors (deactivate dialog box when we get to end)
setActive(false)

==== Activating And Switching Lines ====

different dialog in different situations
new script for NPC (DialogActivator)
put collider on NPC
When character collides with NPC (should be solid), NPC will activate dialog and set dialog text

=== Activating And Switching Lines Pt. 2 ===

two box colliders for girl -- one on enter allowing talk, one to keep from covering
pressing button activates dialogue
make instance of DialogManager accessible
DialogActivator has array of strings for dialog text (I used file)
When player is in area, check to see if they press button (set flag on entering dialog area)
** Only activate if the collider is the player!
On exiting, can activate is false
if you can activate and the player fires, open dialog box
create function that activator will call to start dialog manager managing dialog flow (I gave it the lines and let it do the rest)
set currentLine in dialogManager to 0
display first line and get ready to display more on user input
** You can use debug view to debug Unity (inspector)!
Bug: second line of text appears instead of first
The first appears too fast (confusion of fire between opening dialog box and skipping to next line)
solution: check if the dialog box is active (seems like a different issue, like closing right away) -- and use justStarted flag in DialogManager to keep from advancing lines if justStarted is set. (I dunno -- this doesn't address the underlying issue, which is the duplication of fire event between the two components)
next issue: player can move when talking
solution: set flag to keep player from moving when talking?

=== Keeping the Character From Moving ===

My strategy: flag in PlayerController with set method -- dialog activator sets and clears flag, flag prevents motion.
Video strategy is the same (even name of variable) except that variable was public
Player script was complicated because all move logic was in update()
sets velocity to be 0 so that there isn't a "bleedover" effect (when holding on deactivating)
Sets canMove active when activating dialog box

=== Showing Speaker Name ===

I already handled this by passing info about speaker from the activator.
Class strategy: use "n-" prefix for names (to handle name changes during dialogue). (Slightly different case -- allows for more dynamic dialogue -- the one thing this doesn't cover is dialogue that changes based on the circumstance? I can add it to the system?
Strategy -- if "-n" prefix appears (use regex?) then change nametag and move to next line (while printing).

****

CheckIfName() determines whether line is a name and changes badge accordingly
used startsWith instead of regex
call before displaying each line (parse line before displaying)
need to read past directive -- use .replace "n-" with ""

=== Hiding Namebar For Signs ===

Strategy: pass special name / flag from activator that turns off the name badge for signs.
Pros of using a flag -- makes the functionality clearer
Cons -- passing in a flag (code smell?)
Could use a special id ("Sign") to address this -- but then it isn't obvious to clients
Possible solution: flag that sets id to "Sign" (granted now user can't use this name) without passing in anything additional on activation.
Will need a prefab of some sort to assign to sign objects? / make a character prefab.
-- Adapt above directive solution and give signs a [sign] directive

***

Uses flag solution discussed above